#!/usr/bin/env python3
import argparse
from sktools.skdef import Skdef
import sktools.skgen as skgen
import sktools.common as sc

HELP_TXT = """Collects spin coupling constants by iterating over the
elements defined in skdef.hsd. If the atomic calculation has been done already,
it will be reused, otherwised it is done on the fly.
"""

SCRIPTNAME = sc.get_script_name()
SPINW_FILE_NAME = "spinw.txt"


def main():
    args = parseargs()
    logger = sc.get_script_logger(args.loglevel, SCRIPTNAME)
    logger.info("Collecting spinw constants")
    skdef = Skdef.fromfile("skdef.hsd")
    searchdirs = [ args.builddir, ]
    elems = skdef.atomparameters.keys()
    fp = open(SPINW_FILE_NAME, "w")
    for elem in elems:
        calculator = skgen.run_atom(
            skdef, elem, args.builddir, searchdirs, args.onecnt_binary)
        fp.write(sc.capitalize_elem_name(elem) + ":\n")
        results = calculator.get_result()
        spinw = results.get_spinws()
        ndim = spinw.shape[0]
        formstr = "{:13.5f}" * ndim + "\n"
        for line in spinw:
            fp.write(formstr.format(*line))
        fp.write("\n")
    fp.close()
    logger.info("File '{}' written.".format(SPINW_FILE_NAME))


def parseargs():
    parser = argparse.ArgumentParser(description=HELP_TXT)
    parser.add_argument(
        "-b", "--build-dir", default="_build", dest="builddir",
        help="build directory (default: _build)")
    parser.add_argument(
        "-o", "--onecenter-binary", dest="onecnt_binary", default=None,
        help="binary to use for the one-center calculations (default: depends "
        "on the calculator specified in the input)")
    parser.add_argument(
        "-l", "--log-level", dest="loglevel", default="info",
        choices=[ "debug", "info", "warning", "error" ],
        help="Logging level (default: info)")
    return parser.parse_args()



if __name__ == "__main__":
    main()
