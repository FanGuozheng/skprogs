#!/usr/bin/env python3
import sys
import os.path
from sktools.common import *
from sktools.taggedfile import TaggedFile
from sktools.skdef import SKDefs
from sktools.oldskfile import OldSKFile
import argparse

helptxt = """Collects coefficient information for waveplot. It
iterates over the elements defined in skdefs.py and collects the wave
function coefficients and other information necessary for
waveplot. The homonuclear SK-files for those elements must have been
created already. If it is missing, the given element will be ignored.
"""


def writecoeffs(fp, elem, atomconfig, homoskname, wavecompdir):
    homosk = OldSKFile.fromfile(homoskname)
    cutoff = homosk.nr * homosk.dr / 2.0
    fp.write("{} {{\n".format(elem))
    fp.write("  AtomicNumber = {:d}\n".format(atomconfig.znuc))
    for nn, ll in atomconfig.valenceorbs:
        coeffsname = "coeffs_{:02d}{:1s}.tag".format(nn, ANGMOM_NAMES[ll])
        coeffs = TaggedFile.fromfile(os.path.join(wavecompdir, coeffsname),
                                     transpose=True)
        fp.write("  Orbital {\n")
        fp.write("    AngularMomentum = {:d}\n".format(ll))
        fp.write("    Occupation = {:.1f}\n".format(coeffs["occupation"]))
        fp.write("    Cutoff = {:5.2f}\n".format(cutoff))
        fp.write("    Exponents {\n")
        writefloats(fp, coeffs["exponents"], indent=6, numperline=3,
                    formstr="{:21.12E}")
        fp.write("    }\n")
        fp.write("    Coefficients {\n")
        writefloats(fp, coeffs["coefficients"], indent=3, numperline=3,
                    formstr="{:21.12E}")
        fp.write("    }\n")
        fp.write("  }\n")
    fp.write("}\n")


def parseargs():
    parser = argparse.ArgumentParser(description=helptxt)
    return parser.parse_args()


def main():
    args = parseargs()
    skdefs = SKDefs.fromfile("skdefs.py")
    atomconfigs = skdefs.atomconfigs
    elems = atomconfigs.keys()
    fp = open("wfc.hsd", "w")
    indent = " " * 2
    for elem in elems:
        homoskname = "{}-{}.skf".format(elem, elem)
        wavecompdir = os.path.join(elem, "wavecomp")
        filespresent = (os.path.exists(homoskname) 
                        and os.path.exists(wavecompdir))
        if not filespresent:
            print("*** Skipping: ", elem)
            continue

        print("*** Processing: ", elem)
        atomconfig = atomconfigs[elem]
        writecoeffs(fp, elem, atomconfig, homoskname, wavecompdir)
    fp.close()


if __name__ == "__main__":
    main()
